/* IMPORT */
import isEqual from 'plain-object-is-equal';
import { DEFAULTS, SCOPE_ALL } from '../config.js';
import Parser from '../utils/parser.js';
import PathProp from '../utils/pp.js';
import Type from '../utils/type.js';
/* MAIN */
class ProviderAbstract {
    /* CONSTRUCTOR */
    constructor(options) {
        if (options?.scope === SCOPE_ALL)
            throw new Error(`"${SCOPE_ALL}" is not a valid scope name for a provider`);
        this.scope = options?.scope ?? DEFAULTS.scope;
        this.dataParser = options?.parser ?? new Parser(options?.indentation ?? DEFAULTS.indentation);
        this.defaultsRaw = options?.defaultsRaw ?? DEFAULTS.defaultsRaw;
        this.defaults = PathProp.unflat(options?.defaults ?? (this.dataParser.parse(this.defaultsRaw) || DEFAULTS.defaults));
        this.handlers = [];
        this.init();
    }
    /* API */
    init() {
        const { data, dataRaw } = this.readSync();
        this.data = data;
        this.dataRaw = dataRaw;
        this.dataSchema = this.filterer(this.data);
    }
    dispose() { }
    filterer(data) {
        return data;
    }
    isEqual(data) {
        return Type.isString(data) ? data === this.dataRaw : isEqual(data, this.data);
    }
    triggerChange() {
        this.handlers.forEach(handler => handler());
    }
    onChange(handler) {
        this.handlers.push(handler);
        return () => {
            this.handlers.splice(this.handlers.indexOf(handler), 1);
        };
    }
}
/* EXPORT */
export default ProviderAbstract;
