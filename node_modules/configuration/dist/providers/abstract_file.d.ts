import type { WriteOptions } from 'atomically/dist/types';
import type { Encoding, FSWatcher, ProviderFileOptions } from '../types';
import ProviderMemory from './memory';
declare abstract class ProviderAbstractFile<Options extends ProviderFileOptions = ProviderFileOptions> extends ProviderMemory<Options> {
    path?: string;
    watching: boolean;
    watcher?: FSWatcher;
    writeOptions?: WriteOptions;
    writeSyncOptions?: WriteOptions;
    constructor(options: Partial<Options>);
    dispose(): void;
    swap(path?: string, _initial?: boolean): void;
    watch(): void;
    unwatch(): void;
    abstract fileRead(filePath: string, encoding: Encoding): Promise<string>;
    abstract fileReadSync(filePath: string, encoding: Encoding): string;
    abstract fileWrite(filePath: string, data: string, options?: WriteOptions): Promise<void>;
    abstract fileWriteSync(filePath: string, data: string, options?: WriteOptions): void;
    abstract fileWatch(filePath: string, callback: Function): FSWatcher;
}
export default ProviderAbstractFile;
